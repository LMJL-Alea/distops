[{"path":"https://lmjl-alea.github.io/distops/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 distops authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmjl-alea.github.io/distops/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aymeric Stamm. Author, maintainer.","code":""},{"path":"https://lmjl-alea.github.io/distops/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stamm (2024). distops: Usual Operations Distance Matrices R. R package version 0.0.0.9000, https://lmjl-alea.github.io/distops/, https://github.com/lmjl-alea/distops.","code":"@Manual{,   title = {distops: Usual Operations for Distance Matrices in R},   author = {Aymeric Stamm},   year = {2024},   note = {R package version 0.0.0.9000, https://lmjl-alea.github.io/distops/},   url = {https://github.com/lmjl-alea/distops}, }"},{"path":"https://lmjl-alea.github.io/distops/index.html","id":"distops","dir":"","previous_headings":"","what":"Usual Operations for Distance Matrices in R","title":"Usual Operations for Distance Matrices in R","text":"goal distops provide set functions compute distances observations sample perform operations distance matrices.","code":""},{"path":"https://lmjl-alea.github.io/distops/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Usual Operations for Distance Matrices in R","text":"can install development version distops GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"LMJL-Alea/distops\")"},{"path":"https://lmjl-alea.github.io/distops/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Usual Operations for Distance Matrices in R","text":"Let us compute Euclidean distance matrix cars dataset. First, convert dataset list observations: Next, compute Euclidean distance matrix via [distops::dist()]: can subset matrix using [ operator:","code":"cars_list <- apply(cars, 1, \\(.x) .x, simplify = FALSE) cars_list #> [[1]] #> speed  dist  #>     4     2  #>  #> [[2]] #> speed  dist  #>     4    10  #>  #> [[3]] #> speed  dist  #>     7     4  #>  #> [[4]] #> speed  dist  #>     7    22  #>  #> [[5]] #> speed  dist  #>     8    16  #>  #> [[6]] #> speed  dist  #>     9    10  #>  #> [[7]] #> speed  dist  #>    10    18  #>  #> [[8]] #> speed  dist  #>    10    26  #>  #> [[9]] #> speed  dist  #>    10    34  #>  #> [[10]] #> speed  dist  #>    11    17  #>  #> [[11]] #> speed  dist  #>    11    28  #>  #> [[12]] #> speed  dist  #>    12    14  #>  #> [[13]] #> speed  dist  #>    12    20  #>  #> [[14]] #> speed  dist  #>    12    24  #>  #> [[15]] #> speed  dist  #>    12    28  #>  #> [[16]] #> speed  dist  #>    13    26  #>  #> [[17]] #> speed  dist  #>    13    34  #>  #> [[18]] #> speed  dist  #>    13    34  #>  #> [[19]] #> speed  dist  #>    13    46  #>  #> [[20]] #> speed  dist  #>    14    26  #>  #> [[21]] #> speed  dist  #>    14    36  #>  #> [[22]] #> speed  dist  #>    14    60  #>  #> [[23]] #> speed  dist  #>    14    80  #>  #> [[24]] #> speed  dist  #>    15    20  #>  #> [[25]] #> speed  dist  #>    15    26  #>  #> [[26]] #> speed  dist  #>    15    54  #>  #> [[27]] #> speed  dist  #>    16    32  #>  #> [[28]] #> speed  dist  #>    16    40  #>  #> [[29]] #> speed  dist  #>    17    32  #>  #> [[30]] #> speed  dist  #>    17    40  #>  #> [[31]] #> speed  dist  #>    17    50  #>  #> [[32]] #> speed  dist  #>    18    42  #>  #> [[33]] #> speed  dist  #>    18    56  #>  #> [[34]] #> speed  dist  #>    18    76  #>  #> [[35]] #> speed  dist  #>    18    84  #>  #> [[36]] #> speed  dist  #>    19    36  #>  #> [[37]] #> speed  dist  #>    19    46  #>  #> [[38]] #> speed  dist  #>    19    68  #>  #> [[39]] #> speed  dist  #>    20    32  #>  #> [[40]] #> speed  dist  #>    20    48  #>  #> [[41]] #> speed  dist  #>    20    52  #>  #> [[42]] #> speed  dist  #>    20    56  #>  #> [[43]] #> speed  dist  #>    20    64  #>  #> [[44]] #> speed  dist  #>    22    66  #>  #> [[45]] #> speed  dist  #>    23    54  #>  #> [[46]] #> speed  dist  #>    24    70  #>  #> [[47]] #> speed  dist  #>    24    92  #>  #> [[48]] #> speed  dist  #>    24    93  #>  #> [[49]] #> speed  dist  #>    24   120  #>  #> [[50]] #> speed  dist  #>    25    85 cars_dist <- distops::dist(cars_list) cars_dist #>      1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 #> 2    8                                                                         #> 3    5   3                                                                     #> 4   23  15  18                                                                 #> 5   18  10  13   5                                                             #> 6   13   5   8  10   5                                                         #> 7   22  14  17   1   4   9                                                     #> 8   30  22  25   7  12  17   8                                                 #> 9   38  30  33  15  20  25  16   8                                             #> 10  22  14  17   1   4   9   0   8  16                                         #> 11  33  25  28  10  15  20  11   3   5  11                                     #> 12  20  12  15   3   2   7   2  10  18   2  13                                 #> 13  26  18  21   3   8  13   4   4  12   4   7   6                             #> 14  30  22  25   7  12  17   8   0   8   8   3  10   4                         #> 15  34  26  29  11  16  21  12   4   4  12   1  14   8   4                     #> 16  33  25  28  10  15  20  11   3   5  11   0  13   7   3   1                 #> 17  41  33  36  18  23  28  19  11   3  19   8  21  15  11   7   8             #> 18  41  33  36  18  23  28  19  11   3  19   8  21  15  11   7   8   0         #> 19  53  45  48  30  35  40  31  23  15  31  20  33  27  23  19  20  12  12     #> 20  34  26  29  11  16  21  12   4   4  12   1  14   8   4   0   1   7   7  19 #> 21  44  36  39  21  26  31  22  14   6  22  11  24  18  14  10  11   3   3   9 #> 22  68  60  63  45  50  55  46  38  30  46  35  48  42  38  34  35  27  27  15 #> 23  88  80  83  65  70  75  66  58  50  66  55  68  62  58  54  55  47  47  35 #> 24  29  21  24   6  11  16   7   1   9   7   4   9   3   1   5   4  12  12  24 #> 25  35  27  30  12  17  22  13   5   3  13   2  15   9   5   1   2   6   6  18 #> 26  63  55  58  40  45  50  41  33  25  41  30  43  37  33  29  30  22  22  10 #> 27  42  34  37  19  24  29  20  12   4  20   9  22  16  12   8   9   1   1  11 #> 28  50  42  45  27  32  37  28  20  12  28  17  30  24  20  16  17   9   9   3 #> 29  43  35  38  20  25  30  21  13   5  21  10  23  17  13   9  10   2   2  10 #> 30  51  43  46  28  33  38  29  21  13  29  18  31  25  21  17  18  10  10   2 #> 31  61  53  56  38  43  48  39  31  23  39  28  41  35  31  27  28  20  20   8 #> 32  54  46  49  31  36  41  32  24  16  32  21  34  28  24  20  21  13  13   1 #> 33  68  60  63  45  50  55  46  38  30  46  35  48  42  38  34  35  27  27  15 #> 34  88  80  83  65  70  75  66  58  50  66  55  68  62  58  54  55  47  47  35 #> 35  96  88  91  73  78  83  74  66  58  74  63  76  70  66  62  63  55  55  43 #> 36  49  41  44  26  31  36  27  19  11  27  16  29  23  19  15  16   8   8   4 #> 37  59  51  54  36  41  46  37  29  21  37  26  39  33  29  25  26  18  18   6 #> 38  81  73  76  58  63  68  59  51  43  59  48  61  55  51  47  48  40  40  28 #> 39  46  38  41  23  28  33  24  16   8  24  13  26  20  16  12  13   5   5   7 #> 40  62  54  57  39  44  49  40  32  24  40  29  42  36  32  28  29  21  21   9 #> 41  66  58  61  43  48  53  44  36  28  44  33  46  40  36  32  33  25  25  13 #> 42  70  62  65  47  52  57  48  40  32  48  37  50  44  40  36  37  29  29  17 #> 43  78  70  73  55  60  65  56  48  40  56  45  58  52  48  44  45  37  37  25 #> 44  82  74  77  59  64  69  60  52  44  60  49  62  56  52  48  49  41  41  29 #> 45  71  63  66  48  53  58  49  41  33  49  38  51  45  41  37  38  30  30  18 #> 46  88  80  83  65  70  75  66  58  50  66  55  68  62  58  54  55  47  47  35 #> 47 110 102 105  87  92  97  88  80  72  88  77  90  84  80  76  77  69  69  57 #> 48 111 103 106  88  93  98  89  81  73  89  78  91  85  81  77  78  70  70  58 #> 49 138 130 133 115 120 125 116 108 100 116 105 118 112 108 104 105  97  97  85 #> 50 104  96  99  81  86  91  82  74  66  82  71  84  78  74  70  71  63  63  51 #>     20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38 #> 2                                                                              #> 3                                                                              #> 4                                                                              #> 5                                                                              #> 6                                                                              #> 7                                                                              #> 8                                                                              #> 9                                                                              #> 10                                                                             #> 11                                                                             #> 12                                                                             #> 13                                                                             #> 14                                                                             #> 15                                                                             #> 16                                                                             #> 17                                                                             #> 18                                                                             #> 19                                                                             #> 20                                                                             #> 21  10                                                                         #> 22  34  24                                                                     #> 23  54  44  20                                                                 #> 24   5  15  39  59                                                             #> 25   1   9  33  53   6                                                         #> 26  29  19   5  25  34  28                                                     #> 27   8   2  26  46  13   7  21                                                 #> 28  16   6  18  38  21  15  13   8                                             #> 29   9   1  25  45  14   8  20   1   7                                         #> 30  17   7  17  37  22  16  12   9   1   8                                     #> 31  27  17   7  27  32  26   2  19  11  18  10                                 #> 32  20  10  14  34  25  19   9  12   4  11   3   7                             #> 33  34  24   0  20  39  33   5  26  18  25  17   7  14                         #> 34  54  44  20   0  59  53  25  46  38  45  37  27  34  20                     #> 35  62  52  28   8  67  61  33  54  46  53  45  35  42  28   8                 #> 36  15   5  19  39  20  14  14   7   1   6   2  12   5  19  39  47             #> 37  25  15   9  29  30  24   4  17   9  16   8   2   5   9  29  37  10         #> 38  47  37  13   7  52  46  18  39  31  38  30  20  27  13   7  15  32  22     #> 39  12   2  22  42  17  11  17   4   4   3   5  15   8  22  42  50   3  13  35 #> 40  28  18   6  26  33  27   1  20  12  19  11   1   8   6  26  34  13   3  19 #> 41  32  22   2  22  37  31   3  24  16  23  15   5  12   2  22  30  17   7  15 #> 42  36  26   2  18  41  35   7  28  20  27  19   9  16   2  18  26  21  11  11 #> 43  44  34  10  10  49  43  15  36  28  35  27  17  24  10  10  18  29  19   3 #> 44  48  38  14   6  53  47  19  40  32  39  31  21  28  14   6  14  33  23   1 #> 45  37  27   3  17  42  36   8  29  21  28  20  10  17   3  17  25  22  12  10 #> 46  54  44  20   0  59  53  25  46  38  45  37  27  34  20   0   8  39  29   7 #> 47  76  66  42  22  81  75  47  68  60  67  59  49  56  42  22  14  61  51  29 #> 48  77  67  43  23  82  76  48  69  61  68  60  50  57  43  23  15  62  52  30 #> 49 104  94  70  50 109 103  75  96  88  95  87  77  84  70  50  42  89  79  57 #> 50  70  60  36  16  75  69  41  62  54  61  53  43  50  36  16   8  55  45  23 #>     39  40  41  42  43  44  45  46  47  48  49 #> 2                                              #> 3                                              #> 4                                              #> 5                                              #> 6                                              #> 7                                              #> 8                                              #> 9                                              #> 10                                             #> 11                                             #> 12                                             #> 13                                             #> 14                                             #> 15                                             #> 16                                             #> 17                                             #> 18                                             #> 19                                             #> 20                                             #> 21                                             #> 22                                             #> 23                                             #> 24                                             #> 25                                             #> 26                                             #> 27                                             #> 28                                             #> 29                                             #> 30                                             #> 31                                             #> 32                                             #> 33                                             #> 34                                             #> 35                                             #> 36                                             #> 37                                             #> 38                                             #> 39                                             #> 40  16                                         #> 41  20   4                                     #> 42  24   8   4                                 #> 43  32  16  12   8                             #> 44  36  20  16  12   4                         #> 45  25   9   5   1   7  11                     #> 46  42  26  22  18  10   6  17                 #> 47  64  48  44  40  32  28  39  22             #> 48  65  49  45  41  33  29  40  23   1         #> 49  92  76  72  68  60  56  67  50  28  27     #> 50  58  42  38  34  26  22  33  16   6   7  34 cars_dist[2:3, 7:12] #>    7  8  9 10 11 12 #> 2 14 22 30 14 25 12 #> 3 17 25 33 17 28 15"},{"path":"https://lmjl-alea.github.io/distops/reference/distops-package.html","id":null,"dir":"Reference","previous_headings":"","what":"distops: Usual Operations for Distance Matrices in R — distops-package","title":"distops: Usual Operations for Distance Matrices in R — distops-package","text":"implements alternative `dist()` function integrates parallelization progress bars via `future` framework. also provides functions manipulate distance matrices, implementation subset operator never turn `dist` object full matrix.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/distops/reference/distops-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"distops: Usual Operations for Distance Matrices in R — distops-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@cnrs.fr (ORCID)","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/find_medoids.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the medoids from a distance matrix — find_medoids","title":"Finds the medoids from a distance matrix — find_medoids","text":"function finds medoids distance matrix. medoid object minimizes sum distances objects. function takes advantage RcppParallel package compute medoids parallel.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/find_medoids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the medoids from a distance matrix — find_medoids","text":"","code":"find_medoids(D, memberships = NULL)"},{"path":"https://lmjl-alea.github.io/distops/reference/find_medoids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the medoids from a distance matrix — find_medoids","text":"D object class stats::dist. memberships factor specifying cluster memberships objects.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/find_medoids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the medoids from a distance matrix — find_medoids","text":"named integer vector specifying indices medoids.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/find_medoids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds the medoids from a distance matrix — find_medoids","text":"","code":"D <- stats::dist(iris[, 1:4]) find_medoids(D) #> [1] 62 memberships <- as.factor(rep(1:3, each = 50L)) find_medoids(D, memberships) #>   1   2   3  #>   8  97 113"},{"path":"https://lmjl-alea.github.io/distops/reference/sub-.dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Matrix Subset Operator — [.dist","title":"Distance Matrix Subset Operator — [.dist","text":"Subset operator distance matrix stored object class stats::dist.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/sub-.dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Matrix Subset Operator — [.dist","text":"","code":"# S3 method for dist [(x, i, j, drop = TRUE, ...)"},{"path":"https://lmjl-alea.github.io/distops/reference/sub-.dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Matrix Subset Operator — [.dist","text":"x object class stats::dist. integer vector row indices. Values must either positive case indicate rows select, negative case indicate rows omit. j integer vector column indices. Values must either positive case indicate columns select, negative case indicate columns omit. drop logical value indicating whether result coerced vector matrix possible. ... Additional arguments passed [.dist.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/sub-.dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Matrix Subset Operator — [.dist","text":"numeric matrix storing pairwise distances requested observations.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/sub-.dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Matrix Subset Operator — [.dist","text":"","code":"D <- stats::dist(iris[, 1:4]) D[2:3, 7:12] #>           7         8         9        10        11        12 #> 2 0.5099020 0.4242641 0.5099020 0.1732051 0.8660254 0.4582576 #> 3 0.2645751 0.4123106 0.4358899 0.3162278 0.8831761 0.3741657"},{"path":"https://lmjl-alea.github.io/distops/reference/use_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a distance function to the package — use_distance","title":"Adds a distance function to the package — use_distance","text":"function adds distance function package. first creates R/{distance_name}Distance.R file R wrapper function distance function. creates src/{distance_name}Distance.cpp file C++ implementation distance function. finally opens latter file default editor. user able implement desired distance function way compatible RcppParallel workflow.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/use_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a distance function to the package — use_distance","text":"","code":"use_distance(distance_name)"},{"path":"https://lmjl-alea.github.io/distops/reference/use_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a distance function to the package — use_distance","text":"distance_name character string specifying name distance user aims implementing.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/use_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a distance function to the package — use_distance","text":"Nothing.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/use_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a distance function to the package — use_distance","text":"","code":"if (FALSE) { use_distance(\"euclidean\") }"},{"path":"https://lmjl-alea.github.io/distops/reference/use_distops.html","id":null,"dir":"Reference","previous_headings":"","what":"Setups package to use the distops package — use_distops","title":"Setups package to use the distops package — use_distops","text":"function setups package use distops package. first creates DESCRIPTION file adding Rcpp RcppParallel packages Imports: LinkingTo: fields distops package LinkingTo: field. also adds SystemRequirements: GNU make field. creates NAMESPACE file adding importFrom() directives Rcpp RcppParallel packages useDynLib() directive packages compiled code. finally creates src/Makevars src/Makevars.win files appropriate compilation flags.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/use_distops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setups package to use the distops package — use_distops","text":"","code":"use_distops()"},{"path":"https://lmjl-alea.github.io/distops/reference/use_distops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setups package to use the distops package — use_distops","text":"Nothing.","code":""},{"path":"https://lmjl-alea.github.io/distops/reference/use_distops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setups package to use the distops package — use_distops","text":"","code":"if (FALSE) { use_distops() }"},{"path":[]},{"path":"https://lmjl-alea.github.io/distops/news/index.html","id":"features-0-0-9000","dir":"Changelog","previous_headings":"","what":"Features","title":"distops 0.0.9000","text":"Provides functions use_distops() use_distance() package developers define TBB-parallelized functions compute pairwise distance matrices using custom C++-implemented distance function. Provides subset operator [.dist subset distance matrix. returned object either class dist row column indices identical class matrix row column indices different. Provides function find_medoids(D, memberships = NULL) find medoid(s) distance matrix. memberships provided, one medoid per cluster returned. Otherwise, single overall medoid returned.","code":""},{"path":"https://lmjl-alea.github.io/distops/news/index.html","id":"todo-list-0-0-9000","dir":"Changelog","previous_headings":"","what":"ToDo List","title":"distops 0.0.9000","text":"Pass list instead matrix general? Use Arrow parquet format store distance matrix multiple files sample size exceeds 10,000 something like . Use Arrow connection read large data. Add Progress bar.","code":""}]
